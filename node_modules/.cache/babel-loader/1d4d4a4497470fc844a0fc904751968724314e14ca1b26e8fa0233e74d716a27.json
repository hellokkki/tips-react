{"ast":null,"code":"'use strict';\n\nconst maybeJoin = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.every(arg => arg) ? args.join('') : '';\n};\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\nconst defaults = {\n  sshtemplate: _ref => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref;\n    return `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  sshurltemplate: _ref2 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref2;\n    return `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  browsetemplate: _ref3 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      treepath\n    } = _ref3;\n    return `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`;\n  },\n  browsefiletemplate: _ref4 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      treepath,\n      path,\n      fragment,\n      hashformat\n    } = _ref4;\n    return `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`;\n  },\n  docstemplate: _ref5 => {\n    let {\n      domain,\n      user,\n      project,\n      treepath,\n      committish\n    } = _ref5;\n    return `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`;\n  },\n  httpstemplate: _ref6 => {\n    let {\n      auth,\n      domain,\n      user,\n      project,\n      committish\n    } = _ref6;\n    return `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  filetemplate: _ref7 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      path\n    } = _ref7;\n    return `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`;\n  },\n  shortcuttemplate: _ref8 => {\n    let {\n      type,\n      user,\n      project,\n      committish\n    } = _ref8;\n    return `${type}:${user}/${project}${maybeJoin('#', committish)}`;\n  },\n  pathtemplate: _ref9 => {\n    let {\n      user,\n      project,\n      committish\n    } = _ref9;\n    return `${user}/${project}${maybeJoin('#', committish)}`;\n  },\n  bugstemplate: _ref10 => {\n    let {\n      domain,\n      user,\n      project\n    } = _ref10;\n    return `https://${domain}/${user}/${project}/issues`;\n  },\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: _ref11 => {\n    let {\n      auth,\n      user,\n      project,\n      committish,\n      path\n    } = _ref11;\n    return `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`;\n  },\n  gittemplate: _ref12 => {\n    let {\n      auth,\n      domain,\n      user,\n      project,\n      committish\n    } = _ref12;\n    return `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref13 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref13;\n    return `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`;\n  },\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n    if (type && type !== 'tree') {\n      return;\n    }\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: _ref14 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref14;\n    return `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`;\n  },\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (['get'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: _ref15 => {\n    let {\n      auth,\n      domain,\n      user,\n      project,\n      committish\n    } = _ref15;\n    return `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref16 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref16;\n    return `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`;\n  },\n  extract: url => {\n    const path = url.pathname.slice(1);\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n    const segments = path.split('/');\n    let project = segments.pop();\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    const user = segments.join('/');\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: _ref17 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref17;\n    return `git@${domain}:${project}.git${maybeJoin('#', committish)}`;\n  },\n  sshurltemplate: _ref18 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref18;\n    return `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  browsetemplate: _ref19 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref19;\n    return `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`;\n  },\n  browsefiletemplate: _ref20 => {\n    let {\n      domain,\n      project,\n      committish,\n      path,\n      hashformat\n    } = _ref20;\n    return `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`;\n  },\n  docstemplate: _ref21 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref21;\n    return `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`;\n  },\n  httpstemplate: _ref22 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref22;\n    return `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  filetemplate: _ref23 => {\n    let {\n      user,\n      project,\n      committish,\n      path\n    } = _ref23;\n    return `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`;\n  },\n  shortcuttemplate: _ref24 => {\n    let {\n      type,\n      project,\n      committish\n    } = _ref24;\n    return `${type}:${project}${maybeJoin('#', committish)}`;\n  },\n  pathtemplate: _ref25 => {\n    let {\n      project,\n      committish\n    } = _ref25;\n    return `${project}${maybeJoin('#', committish)}`;\n  },\n  bugstemplate: _ref26 => {\n    let {\n      domain,\n      project\n    } = _ref26;\n    return `https://${domain}/${project}`;\n  },\n  gittemplate: _ref27 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref27;\n    return `git://${domain}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref28 => {\n    let {\n      project,\n      committish\n    } = _ref28;\n    return `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`;\n  },\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (aux === 'raw') {\n      return;\n    }\n    if (!project) {\n      if (!user) {\n        return;\n      }\n      project = user;\n      user = null;\n    }\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: _ref29 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      treepath,\n      path,\n      fragment,\n      hashformat\n    } = _ref29;\n    return `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`;\n  },\n  filetemplate: _ref30 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      path\n    } = _ref30;\n    return `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`;\n  },\n  httpstemplate: _ref31 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref31;\n    return `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref32 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref32;\n    return `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`;\n  },\n  bugstemplate: _ref33 => {\n    let {\n      domain,\n      user,\n      project\n    } = _ref33;\n    return `https://todo.sr.ht/${user}/${project}`;\n  },\n  docstemplate: _ref34 => {\n    let {\n      domain,\n      user,\n      project,\n      treepath,\n      committish\n    } = _ref34;\n    return `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`;\n  },\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\nmodule.exports = gitHosts;","map":{"version":3,"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","browsetemplate","treepath","browsefiletemplate","path","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","sourcehut","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"sources":["/Users/viktorkondakov/Desktop/programming/projects/tips-react/node_modules/hosted-git-info/git-host-info.js"],"sourcesContent":["'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  }\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  }\n})\n\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({ domain, user, project }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}